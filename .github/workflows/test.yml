name: Create Git Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Get Latest Release
        id: latest_release
        run: |
          latest_release=$(curl -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.NPM_AUTH_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
          echo "::set-output name=RELEASE::${latest_release}"
          echo "version: ${latest_release}"

      - name: Determine Version
        id: determine_version
        run: |
          current_version=${{ steps.latest_release.outputs.RELEASE }}
          echo "REF: ${{ github.head_ref }}"
          major=$(echo $current_version | awk -F. '{print $1}')
          minor=$(echo $current_version | awk -F. '{print $2}')
          patch=$(echo $current_version | awk -F. '{print $3}')
          if [[ ${{ github.head_ref }} == *"fix"* ]]; then
            patch=$((patch + 1))
            major_minor_patch="${major}.${minor}.${patch}"
            echo "New version: $major_minor_patch"
          elif [[ ${{ github.head_ref }} == *"refactor"* ]]; then
            patch=$((patch + 1))
            major_minor_patch="${major}.${minor}.${patch}"
            echo "New version: $major_minor_patch"
          elif [[ ${{ github.head_ref }} == *"feat"* ]]; then
            minor=$((minor + 1))
            patch=0
            major_minor_patch="${major}.${minor}.${patch}"
            echo "New version: $major_minor_patch"
          elif [[ ${{ github.head_ref }} == *"upgrade"* ]]; then
            major=$((major + 1))
            minor=0
            patch=0
            major_minor_patch="${major}.${minor}.${patch}"
            echo "New version: $major_minor_patch"
          else
            echo "No version increment (default): $current_version"
          fi
          echo "::set-output name=VERSION::$major_minor_patch"        

      - name: Get Commits
        id: get_commits
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits
        env:
          GITHUB_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Format and Encode Commits
        id: format_commits
        run: |
          FORMATTED_COMMITS=$(echo '${{ steps.get_commits.outputs.data }}' | jq -r '.[] | "- [`\(.sha[0:6])`](https://github.com/${{ github.repository }}/commit/\(.sha)) created by [\(.commit.author.name)](https://github.com/\(.commit.author.name)) - \(.commit.message)"' | base64 -w 0)
          echo "::set-output name=formatted_commits_base64::$FORMATTED_COMMITS"
      
      - name: Decode Formatted Commits and Prepare Release Body
        id: decode_commits
        run: |
          echo -e "Changes in this Release:\n\n$(echo '${{ steps.format_commits.outputs.formatted_commits_base64 }}' | base64 --decode)" > release_body.txt

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        with:
          tag_name: ${{ steps.determine_version.outputs.VERSION }}
          release_name: ${{ steps.determine_version.outputs.VERSION }}
          body_path: release_body.txt